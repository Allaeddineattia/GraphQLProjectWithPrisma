# source: http://localhost:4466/CLL
# timestamp: Sun Sep 29 2019 22:53:42 GMT+0100 (Central European Standard Time)

type AggregateBacklog {
  count: Int!
}

type AggregateDeadline {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateLogin {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Backlog implements Node {
  id: ID!
  project: Project!
  name: String!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BacklogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BacklogEdge]!
  aggregate: AggregateBacklog!
}

input BacklogCreateInput {
  id: ID
  name: String!
  project: ProjectCreateOneWithoutBacklogsInput!
  tasks: TaskCreateManyWithoutBacklogInput
}

input BacklogCreateManyWithoutProjectInput {
  create: [BacklogCreateWithoutProjectInput!]
  connect: [BacklogWhereUniqueInput!]
}

input BacklogCreateOneWithoutTasksInput {
  create: BacklogCreateWithoutTasksInput
  connect: BacklogWhereUniqueInput
}

input BacklogCreateWithoutProjectInput {
  id: ID
  name: String!
  tasks: TaskCreateManyWithoutBacklogInput
}

input BacklogCreateWithoutTasksInput {
  id: ID
  name: String!
  project: ProjectCreateOneWithoutBacklogsInput!
}

"""An edge in a connection."""
type BacklogEdge {
  """The item at the end of the edge."""
  node: Backlog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BacklogOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BacklogPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BacklogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BacklogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BacklogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BacklogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BacklogSubscriptionPayload {
  mutation: MutationType!
  node: Backlog
  updatedFields: [String!]
  previousValues: BacklogPreviousValues
}

input BacklogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BacklogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BacklogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BacklogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BacklogWhereInput
}

input BacklogUpdateInput {
  name: String
  project: ProjectUpdateOneRequiredWithoutBacklogsInput
  tasks: TaskUpdateManyWithoutBacklogInput
}

input BacklogUpdateManyDataInput {
  name: String
}

input BacklogUpdateManyMutationInput {
  name: String
}

input BacklogUpdateManyWithoutProjectInput {
  create: [BacklogCreateWithoutProjectInput!]
  connect: [BacklogWhereUniqueInput!]
  set: [BacklogWhereUniqueInput!]
  disconnect: [BacklogWhereUniqueInput!]
  delete: [BacklogWhereUniqueInput!]
  update: [BacklogUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [BacklogUpdateManyWithWhereNestedInput!]
  deleteMany: [BacklogScalarWhereInput!]
  upsert: [BacklogUpsertWithWhereUniqueWithoutProjectInput!]
}

input BacklogUpdateManyWithWhereNestedInput {
  where: BacklogScalarWhereInput!
  data: BacklogUpdateManyDataInput!
}

input BacklogUpdateOneRequiredWithoutTasksInput {
  create: BacklogCreateWithoutTasksInput
  connect: BacklogWhereUniqueInput
  update: BacklogUpdateWithoutTasksDataInput
  upsert: BacklogUpsertWithoutTasksInput
}

input BacklogUpdateWithoutProjectDataInput {
  name: String
  tasks: TaskUpdateManyWithoutBacklogInput
}

input BacklogUpdateWithoutTasksDataInput {
  name: String
  project: ProjectUpdateOneRequiredWithoutBacklogsInput
}

input BacklogUpdateWithWhereUniqueWithoutProjectInput {
  where: BacklogWhereUniqueInput!
  data: BacklogUpdateWithoutProjectDataInput!
}

input BacklogUpsertWithoutTasksInput {
  update: BacklogUpdateWithoutTasksDataInput!
  create: BacklogCreateWithoutTasksInput!
}

input BacklogUpsertWithWhereUniqueWithoutProjectInput {
  where: BacklogWhereUniqueInput!
  update: BacklogUpdateWithoutProjectDataInput!
  create: BacklogCreateWithoutProjectInput!
}

input BacklogWhereInput {
  """Logical AND on all given filters."""
  AND: [BacklogWhereInput!]

  """Logical OR on all given filters."""
  OR: [BacklogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BacklogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
}

input BacklogWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Deadline implements Node {
  id: ID!
  goals: [String!]!
  date: DateTime!
  project: Project!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DeadlineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeadlineEdge]!
  aggregate: AggregateDeadline!
}

input DeadlineCreategoalsInput {
  set: [String!]
}

input DeadlineCreateInput {
  id: ID
  date: DateTime!
  goals: DeadlineCreategoalsInput
  project: ProjectCreateOneWithoutDeadlinesInput!
}

input DeadlineCreateManyWithoutProjectInput {
  create: [DeadlineCreateWithoutProjectInput!]
  connect: [DeadlineWhereUniqueInput!]
}

input DeadlineCreateWithoutProjectInput {
  id: ID
  date: DateTime!
  goals: DeadlineCreategoalsInput
}

"""An edge in a connection."""
type DeadlineEdge {
  """The item at the end of the edge."""
  node: Deadline!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeadlineOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DeadlinePreviousValues {
  id: ID!
  goals: [String!]!
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DeadlineScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DeadlineScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeadlineScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeadlineScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DeadlineSubscriptionPayload {
  mutation: MutationType!
  node: Deadline
  updatedFields: [String!]
  previousValues: DeadlinePreviousValues
}

input DeadlineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeadlineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeadlineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeadlineSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeadlineWhereInput
}

input DeadlineUpdategoalsInput {
  set: [String!]
}

input DeadlineUpdateInput {
  date: DateTime
  goals: DeadlineUpdategoalsInput
  project: ProjectUpdateOneRequiredWithoutDeadlinesInput
}

input DeadlineUpdateManyDataInput {
  date: DateTime
  goals: DeadlineUpdategoalsInput
}

input DeadlineUpdateManyMutationInput {
  date: DateTime
  goals: DeadlineUpdategoalsInput
}

input DeadlineUpdateManyWithoutProjectInput {
  create: [DeadlineCreateWithoutProjectInput!]
  connect: [DeadlineWhereUniqueInput!]
  set: [DeadlineWhereUniqueInput!]
  disconnect: [DeadlineWhereUniqueInput!]
  delete: [DeadlineWhereUniqueInput!]
  update: [DeadlineUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [DeadlineUpdateManyWithWhereNestedInput!]
  deleteMany: [DeadlineScalarWhereInput!]
  upsert: [DeadlineUpsertWithWhereUniqueWithoutProjectInput!]
}

input DeadlineUpdateManyWithWhereNestedInput {
  where: DeadlineScalarWhereInput!
  data: DeadlineUpdateManyDataInput!
}

input DeadlineUpdateWithoutProjectDataInput {
  date: DateTime
  goals: DeadlineUpdategoalsInput
}

input DeadlineUpdateWithWhereUniqueWithoutProjectInput {
  where: DeadlineWhereUniqueInput!
  data: DeadlineUpdateWithoutProjectDataInput!
}

input DeadlineUpsertWithWhereUniqueWithoutProjectInput {
  where: DeadlineWhereUniqueInput!
  update: DeadlineUpdateWithoutProjectDataInput!
  create: DeadlineCreateWithoutProjectInput!
}

input DeadlineWhereInput {
  """Logical AND on all given filters."""
  AND: [DeadlineWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeadlineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeadlineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
}

input DeadlineWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  title: String!
  beginDate: DateTime!
  endDate: DateTime!
  type: EventType
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  beginDate: DateTime!
  endDate: DateTime!
  type: EventType
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  beginDate_ASC
  beginDate_DESC
  endDate_ASC
  endDate_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  beginDate: DateTime!
  endDate: DateTime!
  type: EventType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

enum EventType {
  REUNION
  AG
  WORKSHOP
  BIRTHDAY
  KOOLPARTY
  RANDONNEE
  OTHER
}

input EventUpdateInput {
  title: String
  beginDate: DateTime
  endDate: DateTime
  type: EventType
}

input EventUpdateManyMutationInput {
  title: String
  beginDate: DateTime
  endDate: DateTime
  type: EventType
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  beginDate: DateTime

  """All values that are not equal to given value."""
  beginDate_not: DateTime

  """All values that are contained in given list."""
  beginDate_in: [DateTime!]

  """All values that are not contained in given list."""
  beginDate_not_in: [DateTime!]

  """All values less than the given value."""
  beginDate_lt: DateTime

  """All values less than or equal the given value."""
  beginDate_lte: DateTime

  """All values greater than the given value."""
  beginDate_gt: DateTime

  """All values greater than or equal the given value."""
  beginDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  type: EventType

  """All values that are not equal to given value."""
  type_not: EventType

  """All values that are contained in given list."""
  type_in: [EventType!]

  """All values that are not contained in given list."""
  type_not_in: [EventType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input EventWhereUniqueInput {
  id: ID
}

type Image implements Node {
  id: ID!
  post: Post!
  name: String!
  mimetype: String!
  encoding: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  name: String!
  mimetype: String!
  encoding: String!
  post: PostCreateOneWithoutImagesInput!
}

input ImageCreateManyWithoutPostInput {
  create: [ImageCreateWithoutPostInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateWithoutPostInput {
  id: ID
  name: String!
  mimetype: String!
  encoding: String!
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  name: String!
  mimetype: String!
  encoding: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateInput {
  name: String
  mimetype: String
  encoding: String
  post: PostUpdateOneRequiredWithoutImagesInput
}

input ImageUpdateManyDataInput {
  name: String
  mimetype: String
  encoding: String
}

input ImageUpdateManyMutationInput {
  name: String
  mimetype: String
  encoding: String
}

input ImageUpdateManyWithoutPostInput {
  create: [ImageCreateWithoutPostInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  delete: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ImageScalarWhereInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPostInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateWithoutPostDataInput {
  name: String
  mimetype: String
  encoding: String
}

input ImageUpdateWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateWithoutPostDataInput!
}

input ImageUpsertWithWhereUniqueWithoutPostInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateWithoutPostDataInput!
  create: ImageCreateWithoutPostInput!
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  post: PostWhereInput
}

input ImageWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Login implements Node {
  id: ID!
  email: String!
  pseudo: String!
  password: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LoginConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LoginEdge]!
  aggregate: AggregateLogin!
}

input LoginCreateInput {
  id: ID
  email: String!
  pseudo: String!
  password: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LoginEdge {
  """The item at the end of the edge."""
  node: Login!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LoginOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  pseudo_ASC
  pseudo_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LoginPreviousValues {
  id: ID!
  email: String!
  pseudo: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LoginSubscriptionPayload {
  mutation: MutationType!
  node: Login
  updatedFields: [String!]
  previousValues: LoginPreviousValues
}

input LoginSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LoginSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LoginSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LoginSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LoginWhereInput
}

input LoginUpdateInput {
  email: String
  pseudo: String
  password: String
  user: UserUpdateOneRequiredInput
}

input LoginUpdateManyMutationInput {
  email: String
  pseudo: String
  password: String
}

input LoginWhereInput {
  """Logical AND on all given filters."""
  AND: [LoginWhereInput!]

  """Logical OR on all given filters."""
  OR: [LoginWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LoginWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  pseudo: String

  """All values that are not equal to given value."""
  pseudo_not: String

  """All values that are contained in given list."""
  pseudo_in: [String!]

  """All values that are not contained in given list."""
  pseudo_not_in: [String!]

  """All values less than the given value."""
  pseudo_lt: String

  """All values less than or equal the given value."""
  pseudo_lte: String

  """All values greater than the given value."""
  pseudo_gt: String

  """All values greater than or equal the given value."""
  pseudo_gte: String

  """All values containing the given string."""
  pseudo_contains: String

  """All values not containing the given string."""
  pseudo_not_contains: String

  """All values starting with the given string."""
  pseudo_starts_with: String

  """All values not starting with the given string."""
  pseudo_not_starts_with: String

  """All values ending with the given string."""
  pseudo_ends_with: String

  """All values not ending with the given string."""
  pseudo_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input LoginWhereUniqueInput {
  id: ID
  email: String
  pseudo: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLogin(data: LoginCreateInput!): Login!
  createRoom(data: RoomCreateInput!): Room!
  createPost(data: PostCreateInput!): Post!
  createImage(data: ImageCreateInput!): Image!
  createProject(data: ProjectCreateInput!): Project!
  createDeadline(data: DeadlineCreateInput!): Deadline!
  createBacklog(data: BacklogCreateInput!): Backlog!
  createTask(data: TaskCreateInput!): Task!
  createEvent(data: EventCreateInput!): Event!
  createUser(data: UserCreateInput!): User!
  updateLogin(data: LoginUpdateInput!, where: LoginWhereUniqueInput!): Login
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateDeadline(data: DeadlineUpdateInput!, where: DeadlineWhereUniqueInput!): Deadline
  updateBacklog(data: BacklogUpdateInput!, where: BacklogWhereUniqueInput!): Backlog
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteLogin(where: LoginWhereUniqueInput!): Login
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deletePost(where: PostWhereUniqueInput!): Post
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteDeadline(where: DeadlineWhereUniqueInput!): Deadline
  deleteBacklog(where: BacklogWhereUniqueInput!): Backlog
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteUser(where: UserWhereUniqueInput!): User
  upsertLogin(where: LoginWhereUniqueInput!, create: LoginCreateInput!, update: LoginUpdateInput!): Login!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertDeadline(where: DeadlineWhereUniqueInput!, create: DeadlineCreateInput!, update: DeadlineUpdateInput!): Deadline!
  upsertBacklog(where: BacklogWhereUniqueInput!, create: BacklogCreateInput!, update: BacklogUpdateInput!): Backlog!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyLogins(data: LoginUpdateManyMutationInput!, where: LoginWhereInput): BatchPayload!
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyDeadlines(data: DeadlineUpdateManyMutationInput!, where: DeadlineWhereInput): BatchPayload!
  updateManyBacklogs(data: BacklogUpdateManyMutationInput!, where: BacklogWhereInput): BatchPayload!
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyLogins(where: LoginWhereInput): BatchPayload!
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyDeadlines(where: DeadlineWhereInput): BatchPayload!
  deleteManyBacklogs(where: BacklogWhereInput): BatchPayload!
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  room: Room!
  author: User!
  content: String
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  content: String
  room: RoomCreateOneWithoutPostsInput!
  author: UserCreateOneInput!
  images: ImageCreateManyWithoutPostInput
}

input PostCreateManyWithoutRoomInput {
  create: [PostCreateWithoutRoomInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutImagesInput {
  create: PostCreateWithoutImagesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutImagesInput {
  id: ID
  content: String
  room: RoomCreateOneWithoutPostsInput!
  author: UserCreateOneInput!
}

input PostCreateWithoutRoomInput {
  id: ID
  content: String
  author: UserCreateOneInput!
  images: ImageCreateManyWithoutPostInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  content: String
  room: RoomUpdateOneRequiredWithoutPostsInput
  author: UserUpdateOneRequiredInput
  images: ImageUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  content: String
}

input PostUpdateManyMutationInput {
  content: String
}

input PostUpdateManyWithoutRoomInput {
  create: [PostCreateWithoutRoomInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutRoomInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutImagesInput {
  create: PostCreateWithoutImagesInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutImagesDataInput
  upsert: PostUpsertWithoutImagesInput
}

input PostUpdateWithoutImagesDataInput {
  content: String
  room: RoomUpdateOneRequiredWithoutPostsInput
  author: UserUpdateOneRequiredInput
}

input PostUpdateWithoutRoomDataInput {
  content: String
  author: UserUpdateOneRequiredInput
  images: ImageUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutRoomInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutRoomDataInput!
}

input PostUpsertWithoutImagesInput {
  update: PostUpdateWithoutImagesDataInput!
  create: PostCreateWithoutImagesInput!
}

input PostUpsertWithWhereUniqueWithoutRoomInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutRoomDataInput!
  create: PostCreateWithoutRoomInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  room: RoomWhereInput
  author: UserWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Project implements Node {
  id: ID!
  title: String!
  description: String
  technologies: [String!]!
  room: Room!
  backlogs(where: BacklogWhereInput, orderBy: BacklogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Backlog!]
  deadlines(where: DeadlineWhereInput, orderBy: DeadlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deadline!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  title: String!
  description: String
  technologies: ProjectCreatetechnologiesInput
  room: RoomCreateOneWithoutProjectInput!
  backlogs: BacklogCreateManyWithoutProjectInput
  deadlines: DeadlineCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutBacklogsInput {
  create: ProjectCreateWithoutBacklogsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutDeadlinesInput {
  create: ProjectCreateWithoutDeadlinesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutRoomInput {
  create: ProjectCreateWithoutRoomInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreatetechnologiesInput {
  set: [String!]
}

input ProjectCreateWithoutBacklogsInput {
  id: ID
  title: String!
  description: String
  technologies: ProjectCreatetechnologiesInput
  room: RoomCreateOneWithoutProjectInput!
  deadlines: DeadlineCreateManyWithoutProjectInput
}

input ProjectCreateWithoutDeadlinesInput {
  id: ID
  title: String!
  description: String
  technologies: ProjectCreatetechnologiesInput
  room: RoomCreateOneWithoutProjectInput!
  backlogs: BacklogCreateManyWithoutProjectInput
}

input ProjectCreateWithoutRoomInput {
  id: ID
  title: String!
  description: String
  technologies: ProjectCreatetechnologiesInput
  backlogs: BacklogCreateManyWithoutProjectInput
  deadlines: DeadlineCreateManyWithoutProjectInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  description: String
  technologies: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  description: String
  technologies: ProjectUpdatetechnologiesInput
  room: RoomUpdateOneRequiredWithoutProjectInput
  backlogs: BacklogUpdateManyWithoutProjectInput
  deadlines: DeadlineUpdateManyWithoutProjectInput
}

input ProjectUpdateManyMutationInput {
  title: String
  description: String
  technologies: ProjectUpdatetechnologiesInput
}

input ProjectUpdateOneRequiredWithoutBacklogsInput {
  create: ProjectCreateWithoutBacklogsInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutBacklogsDataInput
  upsert: ProjectUpsertWithoutBacklogsInput
}

input ProjectUpdateOneRequiredWithoutDeadlinesInput {
  create: ProjectCreateWithoutDeadlinesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutDeadlinesDataInput
  upsert: ProjectUpsertWithoutDeadlinesInput
}

input ProjectUpdateOneWithoutRoomInput {
  create: ProjectCreateWithoutRoomInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutRoomDataInput
  upsert: ProjectUpsertWithoutRoomInput
}

input ProjectUpdatetechnologiesInput {
  set: [String!]
}

input ProjectUpdateWithoutBacklogsDataInput {
  title: String
  description: String
  technologies: ProjectUpdatetechnologiesInput
  room: RoomUpdateOneRequiredWithoutProjectInput
  deadlines: DeadlineUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutDeadlinesDataInput {
  title: String
  description: String
  technologies: ProjectUpdatetechnologiesInput
  room: RoomUpdateOneRequiredWithoutProjectInput
  backlogs: BacklogUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutRoomDataInput {
  title: String
  description: String
  technologies: ProjectUpdatetechnologiesInput
  backlogs: BacklogUpdateManyWithoutProjectInput
  deadlines: DeadlineUpdateManyWithoutProjectInput
}

input ProjectUpsertWithoutBacklogsInput {
  update: ProjectUpdateWithoutBacklogsDataInput!
  create: ProjectCreateWithoutBacklogsInput!
}

input ProjectUpsertWithoutDeadlinesInput {
  update: ProjectUpdateWithoutDeadlinesDataInput!
  create: ProjectCreateWithoutDeadlinesInput!
}

input ProjectUpsertWithoutRoomInput {
  update: ProjectUpdateWithoutRoomDataInput!
  create: ProjectCreateWithoutRoomInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  room: RoomWhereInput
  backlogs_every: BacklogWhereInput
  backlogs_some: BacklogWhereInput
  backlogs_none: BacklogWhereInput
  deadlines_every: DeadlineWhereInput
  deadlines_some: DeadlineWhereInput
  deadlines_none: DeadlineWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  logins(where: LoginWhereInput, orderBy: LoginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Login]!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  deadlines(where: DeadlineWhereInput, orderBy: DeadlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deadline]!
  backlogs(where: BacklogWhereInput, orderBy: BacklogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Backlog]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  login(where: LoginWhereUniqueInput!): Login
  room(where: RoomWhereUniqueInput!): Room
  post(where: PostWhereUniqueInput!): Post
  image(where: ImageWhereUniqueInput!): Image
  project(where: ProjectWhereUniqueInput!): Project
  deadline(where: DeadlineWhereUniqueInput!): Deadline
  backlog(where: BacklogWhereUniqueInput!): Backlog
  task(where: TaskWhereUniqueInput!): Task
  event(where: EventWhereUniqueInput!): Event
  user(where: UserWhereUniqueInput!): User
  loginsConnection(where: LoginWhereInput, orderBy: LoginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoginConnection!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  deadlinesConnection(where: DeadlineWhereInput, orderBy: DeadlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeadlineConnection!
  backlogsConnection(where: BacklogWhereInput, orderBy: BacklogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BacklogConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Room implements Node {
  id: ID!
  name: String!
  master: User
  project: Project
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  name: String!
  master: UserCreateOneInput
  project: ProjectCreateOneWithoutRoomInput
  users: UserCreateManyInput
  posts: PostCreateManyWithoutRoomInput
}

input RoomCreateOneWithoutPostsInput {
  create: RoomCreateWithoutPostsInput
  connect: RoomWhereUniqueInput
}

input RoomCreateOneWithoutProjectInput {
  create: RoomCreateWithoutProjectInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutPostsInput {
  id: ID
  name: String!
  master: UserCreateOneInput
  project: ProjectCreateOneWithoutRoomInput
  users: UserCreateManyInput
}

input RoomCreateWithoutProjectInput {
  id: ID
  name: String!
  master: UserCreateOneInput
  users: UserCreateManyInput
  posts: PostCreateManyWithoutRoomInput
}

"""An edge in a connection."""
type RoomEdge {
  """The item at the end of the edge."""
  node: Room!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoomPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
}

input RoomUpdateInput {
  name: String
  master: UserUpdateOneInput
  project: ProjectUpdateOneWithoutRoomInput
  users: UserUpdateManyInput
  posts: PostUpdateManyWithoutRoomInput
}

input RoomUpdateManyMutationInput {
  name: String
}

input RoomUpdateOneRequiredWithoutPostsInput {
  create: RoomCreateWithoutPostsInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutPostsDataInput
  upsert: RoomUpsertWithoutPostsInput
}

input RoomUpdateOneRequiredWithoutProjectInput {
  create: RoomCreateWithoutProjectInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutProjectDataInput
  upsert: RoomUpsertWithoutProjectInput
}

input RoomUpdateWithoutPostsDataInput {
  name: String
  master: UserUpdateOneInput
  project: ProjectUpdateOneWithoutRoomInput
  users: UserUpdateManyInput
}

input RoomUpdateWithoutProjectDataInput {
  name: String
  master: UserUpdateOneInput
  users: UserUpdateManyInput
  posts: PostUpdateManyWithoutRoomInput
}

input RoomUpsertWithoutPostsInput {
  update: RoomUpdateWithoutPostsDataInput!
  create: RoomCreateWithoutPostsInput!
}

input RoomUpsertWithoutProjectInput {
  update: RoomUpdateWithoutProjectDataInput!
  create: RoomCreateWithoutProjectInput!
}

input RoomWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  master: UserWhereInput
  project: ProjectWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  login(where: LoginSubscriptionWhereInput): LoginSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  deadline(where: DeadlineSubscriptionWhereInput): DeadlineSubscriptionPayload
  backlog(where: BacklogSubscriptionWhereInput): BacklogSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Task implements Node {
  id: ID!
  backlog: Backlog!
  task: String!
  status: TaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  id: ID
  task: String!
  status: TaskStatus!
  backlog: BacklogCreateOneWithoutTasksInput!
}

input TaskCreateManyWithoutBacklogInput {
  create: [TaskCreateWithoutBacklogInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutBacklogInput {
  id: ID
  task: String!
  status: TaskStatus!
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  task_ASC
  task_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TaskPreviousValues {
  id: ID!
  task: String!
  status: TaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TaskScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  task: String

  """All values that are not equal to given value."""
  task_not: String

  """All values that are contained in given list."""
  task_in: [String!]

  """All values that are not contained in given list."""
  task_not_in: [String!]

  """All values less than the given value."""
  task_lt: String

  """All values less than or equal the given value."""
  task_lte: String

  """All values greater than the given value."""
  task_gt: String

  """All values greater than or equal the given value."""
  task_gte: String

  """All values containing the given string."""
  task_contains: String

  """All values not containing the given string."""
  task_not_contains: String

  """All values starting with the given string."""
  task_starts_with: String

  """All values not starting with the given string."""
  task_not_starts_with: String

  """All values ending with the given string."""
  task_ends_with: String

  """All values not ending with the given string."""
  task_not_ends_with: String
  status: TaskStatus

  """All values that are not equal to given value."""
  status_not: TaskStatus

  """All values that are contained in given list."""
  status_in: [TaskStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TaskStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum TaskStatus {
  TODO
  DONE
  TODO_URGENT
  RESOLUTION
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  task: String
  status: TaskStatus
  backlog: BacklogUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyDataInput {
  task: String
  status: TaskStatus
}

input TaskUpdateManyMutationInput {
  task: String
  status: TaskStatus
}

input TaskUpdateManyWithoutBacklogInput {
  create: [TaskCreateWithoutBacklogInput!]
  connect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutBacklogInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  deleteMany: [TaskScalarWhereInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutBacklogInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput!
  data: TaskUpdateManyDataInput!
}

input TaskUpdateWithoutBacklogDataInput {
  task: String
  status: TaskStatus
}

input TaskUpdateWithWhereUniqueWithoutBacklogInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutBacklogDataInput!
}

input TaskUpsertWithWhereUniqueWithoutBacklogInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutBacklogDataInput!
  create: TaskCreateWithoutBacklogInput!
}

input TaskWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  task: String

  """All values that are not equal to given value."""
  task_not: String

  """All values that are contained in given list."""
  task_in: [String!]

  """All values that are not contained in given list."""
  task_not_in: [String!]

  """All values less than the given value."""
  task_lt: String

  """All values less than or equal the given value."""
  task_lte: String

  """All values greater than the given value."""
  task_gt: String

  """All values greater than or equal the given value."""
  task_gte: String

  """All values containing the given string."""
  task_contains: String

  """All values not containing the given string."""
  task_not_contains: String

  """All values starting with the given string."""
  task_starts_with: String

  """All values not starting with the given string."""
  task_not_starts_with: String

  """All values ending with the given string."""
  task_ends_with: String

  """All values not ending with the given string."""
  task_not_ends_with: String
  status: TaskStatus

  """All values that are not equal to given value."""
  status_not: TaskStatus

  """All values that are contained in given list."""
  status_in: [TaskStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TaskStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  backlog: BacklogWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  role: UserRole!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  birthDate_ASC
  birthDate_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  USER
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  birthDate: DateTime

  """All values that are not equal to given value."""
  birthDate_not: DateTime

  """All values that are contained in given list."""
  birthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDate_not_in: [DateTime!]

  """All values less than the given value."""
  birthDate_lt: DateTime

  """All values less than or equal the given value."""
  birthDate_lte: DateTime

  """All values greater than the given value."""
  birthDate_gt: DateTime

  """All values greater than or equal the given value."""
  birthDate_gte: DateTime
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  birthDate: DateTime
  role: UserRole
}

input UserUpdateInput {
  firstName: String
  lastName: String
  birthDate: DateTime
  role: UserRole
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  birthDate: DateTime
  role: UserRole
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  birthDate: DateTime
  role: UserRole
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  birthDate: DateTime

  """All values that are not equal to given value."""
  birthDate_not: DateTime

  """All values that are contained in given list."""
  birthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDate_not_in: [DateTime!]

  """All values less than the given value."""
  birthDate_lt: DateTime

  """All values less than or equal the given value."""
  birthDate_lte: DateTime

  """All values greater than the given value."""
  birthDate_gt: DateTime

  """All values greater than or equal the given value."""
  birthDate_gte: DateTime
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
}
