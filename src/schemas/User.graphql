type Login{
  id: ID! 
  email: String! 
  pseudo: String! 
  password: String!
  user: User! 
  createdAt: String! 
  updatedAt: String! 
}

type User {
  id: ID! 
  firstName: String!
  lastName: String!
  birthDate: String!
  role: UserRole!
  rooms: [Room!]
  createdAt: String! 
  updatedAt: String! 
}

extend type Query {
    me: Login!
    users(query: String, id: String ): [User!]!
    logins(query: String, id: String ): [Login!]!
}

extend type Mutation {
    signUp(data: SignUpInput): AuthPayload!
    login(data: LoginInput): AuthPayload!
    updateMe(data: UpdateUserInput): Login!
    makeUserAdmin(userID: String): User!
    makeMeAdmin: User!
}

type AuthPayload {
  token: String!
  user: Login! 
}

input LoginInput {
  pseudo: String
  email: String
  password: String!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  birthDate: String!
  password: String!
  email: String!
  pseudo: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  birthDate: String
  password: String
}

enum UserRole{
  ADMIN
  USER
}