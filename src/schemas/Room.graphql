type Room{
  id: ID! 
  name: String!
  master: User! 
  project: Project
  users: [User!]! 
  posts: [Post!]!
  createdAt: String! 
  updatedAt: String! 
}

type Post{
  id: ID! 
  room: Room!
  author:  User!
  content: String
  images: [Image!]
  createdAt: String! 
  updatedAt: String! 
}

type Image{
  id: ID! 
  post: Post!
  name: String!
  mimetype: String!
  encoding: String!
  createdAt: String! 
  updatedAt: String! 
}

extend type Query{
  rooms(query: String): [Room!]!
  posts(query: String): [Post!]!
  images(query: String): [Image!]!
  post(query: String): Post!
  room(title: String, id:String): Room!
}

extend type Mutation{
  createRoom(data: CreateRoomInput!): Room!
  updateRoom(id: String!, data: UpdateRoomInput!): Room!
  createPost(roomId: String!, data: CreatePostInput!): Post!
}

enum ManageMembersAction{
  ADD
  REMOVE
}

input UploadImageInput{
  name: String!
  mimetype: String!
  encoding: String!
}

input CreatePostInput{
  content: String!
  images: [UploadImageInput!]

}

input CreateRoomInput { 
  name: String!
  memberIds: [String!] 
}

input UpdateRoomInput{
  masterId: String
  name: String
  members: UpdateRoomMembersInput
}

input UpdateRoomMembersInput{
  action: ManageMembersAction!
  Ids: [String!]!
}