extend type Query {
  projects(query: String): [Project!]!
  deadlines: [Deadline!]!
  backlogs(query: String): [Backlog!]!
}

extend type Mutation{
  createProject(roomId: String!, data: CreateProjectInput!): Project!
  updateProject(projectId: String!, data: UpdateProjectInput!): Project!
  createDeadLine(projectId: String!, data: CreateDeadLineInput!): Deadline!
  createBacklog(projectId: String!, data: CreateBacklogInput!): Backlog!
  addTasks(backlogId: String!, data: [CreateTaskInput!]!): Backlog!
  updateTask(taskId: String!, data: UpdateTaskInput!): Task!
}

input UpdateProjectInput {
  title: String
  description: String
  technologies: [String!]
}

input CreateProjectInput {
  title: String!
  description: String
  technologies: [String!]
}
 
type Project{
  id: ID! 
  title: String!
  description: String
  technologies: [String!]
  room: Room! 
  backlogs: [Backlog!]
  deadlines: [Deadline!] 
  createdAt: String! 
  updatedAt: String! 
}

input CreateDeadLineInput {
  goals: [String!]!
  date: String!
}


type Deadline{
  id: ID! 
  goals: [String!]! 
  date: String!
  project: Project!
  createdAt: String! 
  updatedAt: String! 
}


input CreateBacklogInput{
  name: String!
  tasks: [CreateTaskInput!]
}

input CreateTaskInput{
  task: String!
  status: TaskStatus!
}

type Backlog{
  id: ID! 
  name: String!
  project: Project!
  tasks: [Task!]
  createdAt: String! 
  updatedAt: String! 
}



input UpdateTaskInput{
  task: String
  status: TaskStatus
}

type Task{
  id: ID! 
  backlog: Backlog!
  task: String!
  status: TaskStatus!
  createdAt: String! 
  updatedAt: String! 
}

enum TaskStatus{
  TODO
  DONE
  TODO_URGENT
  RESOLUTION
}
